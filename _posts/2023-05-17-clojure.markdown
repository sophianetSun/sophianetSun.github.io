---
layout: post
title: "클로저의 기본 세팅"
date: 2023-05-17 20:48:00 +0900
categories: clojure
---

올해 1월부터 클로저(Clojure) 언어를 공부하고, 사용하며 정착한 세팅이다.

클로저를 시작하게 된 계기는 **폴 그레이엄**이 쓴 에세이 **해커와 화가**였다. 그 안에서 개발자, 창업자가 겪게 되는 많은 경험들을 녹아내고 있는데, 그 중 한 챕터에 마음이 꽂혔던 것이랬다.

> 스타트업을 시작하는 회사는 LISP(리스프)를 써라!

그 한마디에 꽂혀 이 고생(?)을 시작하게 된 터였다.

나의 프로그래밍 언어 답사기는 이렇게 시작됐다.

처음 워드프레스로 웹페이지를 만들어보며 **Web3(HTML, CSS, JAVASCRIPT)**를 시작으로, 다시 프로그래밍을 진지하게 공부해보자는 마음으로 시작한 **C언어** 입문책, 그리고 비야네 스트롭스트롭의 **C++** 프로그래밍 기초, 아~ 이걸론 코딩은 택도 없겠구나 싶어, 앱개발을 위해 선택한 애플의 **Swift**. 간단한 명언 앱을 만들어보니, 아~ 네트워크 통신을 할 줄 알아야 되겠구나 싶어, 국비지원 학원을 다니며 시작한 **JAVA**. 수료 후 다시 간단한 웹페이지와 토이 프로젝트를 위해 했던 **PYTHON**이 취업에 도움을 줘, 1년 넘게 데이터 처리 및 서버 개발에 활용했었다.

이직하며 회사의 1인 웹개발자로 서버부터 화면까지 구현하게 되어 다시 돌아온 **JAVASCRIPT**, 그리고 당시 혼자였지만 미래의 팀을 위해 선택한 **TYPESCRIPT**. 개발하다 보니 심플한 서버 구축 및 커맨드라인 프로그램 개발을 위해 공부한 **Go**, 로그 수집기 FluentD를 보다보니 커스터마이징을 위해 필요한 **RUBY**. 그리고 애증의 **CLOJURE**다.

파이썬으로 코드를 짤 때도 그렇고, 프론트엔드 작업을 하면서 리액트를 쓰면서도 기존 명령형 코드 보다는 어째선가 함수형 프로그래밍 방식이 뭔가 좀 더 간결하고, 코드를 짤 때는 불편하지만 성능면에서도 더 나은 측면이 있는 것 같아 애용하고 있었다.

그런데 언어 자체의 철학이 함수형이라니!! 거기다 좀 더 검색해보니 클린 코드의 아버지 엉클 샘이 얘기한 마지막으로 배워야 할 프로그래밍 언어라니!! 벌써 10년 전 기사[http://www.techsuda.com/archives/1674](http://www.techsuda.com/archives/1674). 물론 10년이 지난 이 시점에 클로저의 사용이 대중적이진 않은 것을 보면, 이쪽 분야는 전문가의 말대로 이뤄지기가 정말 어렵다는 사실도 다시 한번 느껴진다.

[티오베 프로그래밍 언어 순위](https://www.tiobe.com/tiobe-index/)를 보면 50위권 안에는 보이지 않고, 무려 The Next 50 Programming Languages에 포함되어 있다. 이와 같읕 등급에 포함된 눈에 익숙한 언어로는 알골, 쉘, 파워쉘, Awk, CoffeScript, Common Lisp, 얼랭, OCaml, 스몰토크 같은 언어들이다.

클로저는 순위 27위에 랭크된 LISP 언어의 방언(dialect)으로, 리스프 언어의 문법이나 철학 등을 계승하고 있다. 리스프 언어는 역사가 오래된 언어로, 그 자체로 쓰이기 보다는 Scheme, Racket, Clojure, Common Lisp 등의 파생된 방언들을 실무적으로 쓰는 것으로 알고 있다. _Scheme 언어가 마법사책 컴퓨터 프로그램의 구조와 해석 예제 코드로 쓰였기에 이도 역시 한번 시도해보다 포기한 경험이 있지..._

지금 생각해보면 회사를 그만두고 시간적 여유가 있는 와중이라 시작했지 아니었으면 엄두도 못할 일이었던 것 같다. 뭐 역시 그래도 새로운 것을 배우는 것은 언제나 즐거운 일.

공부하며, 프로젝트도 해보며 느끼는 점은 사용자의 절대 수가 많지는 않지만 사용자가 많은 다른 언어에 꿀리지 않는 열성적인 커뮤니티가 갖춰져 있고, _물론 한국 커뮤니티는 거의 전무하다고 봐도 될 것 같다. 페이스북의 한국 클로저 그룹이 있지만 큰 활동은 없고, 클로저 개발자를 뽑는 한국 회사는 2~3곳 정도 인듯 싶다. 그나마 그립랩스에서 클로저 블로그도 쓰고 했던데 요새는 그마저도 뜸한듯_ 만들어진 오픈소스 프로젝트들이 별 숫자는 적어도(클로저로 개발된 별이 많은 오픈소스 프로젝트가 수백개) 굉장히 잘 만들어져있다는 느낌이 강하다.

역시 커다란 진입 장벽은, 익숙하지 않은 함수형 패러다임과 거의 전무한 한국어 자료이다. 함수형 패러다임은 에릭 노마드가 쓴 함수형 프로그래밍 언어가 도움이 많이 되는 듯. 내 생각에 함수형 언어의 가장 큰 차이로는 변수 선언과 범위랄까... 또, 에릭 노마드는 본인의 웹사이트를 통해서도 클로저에 대한 강의를 많이 하고 있다. 약간 클로저 계의 니콜라스 같은 느낌? 이다.

하지만 영어(번역기의 능력을 포함해)의 압박을 조금만 견딘다면 생각보다 괜찮은 자료들이 많다. 물론 양적으로 많은 것은 아니지만 고수들이 써놓은 양질의 도서와 블로그가 공개되어 있는 것도 있고, 비용을 지불하면 풍부한 실무 샘플 코드로 이루어진 강의들도 많이 있다.

그 강의들과 검색들을 참고해 몇 달 동안 구성된 개발환경은 다음과 같다.

- 에디터: [VSCode][vscode] + [Calva][calva]
- 웹개발 프레임워크/라이브러리: [Kit Framework][kit]
- 빌드툴: [deps][deps], [boot][boot], [clj-new][clj-new]

### [VSCode][vscode]와 [Calva][calva]

> 개발자의 친구, 만능 에디터 VSCode!

사실 처음 시작은 [emacs][emacs] 였다. 진정한 만능 에디터라고 할 수 있는 emacs 텍스트 에디터지만, 디버거도 되고, 웹브라우저도 되고, 게임도(!) 된다는 그 프로그램이다. LISP로 작성되었다는 리스프 그 자체라고 하여, 과감히 시작해 보았다.

클로저에 대한 플러그인을 깔고 몇가지 세팅을 해주니 사실 굉장히 편했다. 특히 마우스가 없었을 시절 만들어진 프로그램이기 때문에 또한 애초에 GUI가 아닌 CUI 프로그램이었기 때문에 마우스 없이 사용하기 매우 편리한 우리가 상상했던 해커의 모습을 할 수 있다는 장점이 있었다. 하지만 나는 주로 웹개발을 하고, 웹브라우저를 봐야하고, 부족한 실력을 구글 검색을 해야 했기에 이맥스 화면에만 포커싱 될 수는 없었다.

그래서 다른 옵션들을 탐색해 보았다. 여러 많은 에디터 옵션들이 보였지만 눈에 띄는 것은 단연 인텔리제이 IDEA와 VS Code. 클로저의 기반은 JVM으로 자바와 궁합이 좋은 인텔리제이의 명성은 알고 있지만, 풃버전을 구매해 놓고도 잘 쓰지 못했던 뼈아픈 기억이 있기 때문에, 익숙한 VSCode를 선택했다. 거기에 Calva라는 무지막지한 플러그인은 빠르게 개발 및 유지보수 되고 있기 때문에, 이를 선택해 잘 사용하고 있다.

클로저 및 클로저 스크립트 개발시 강점은 REPL 기능의 유용함과 강력함인데, Calva에서는 약간의 설정을 통해 이를 가능하게 할 수 있다.

### [Kit Framework][kit]

> 클로저에서 Django, flask, express, next.js 를 찾아라

처음 클로저를 시작하면서 했던 고민은 내가 결국 클로저로 할 것은 웹개발인데 그럼 클로저에서 웹개발을 어떻게 해야 하지? 어떤 라이브러리나 프레임워크를 사용해야 하지? 였다.

사용자가 많지 않은 특성 상 파이썬이나 자바스크립트 처럼 압도적으로 많은 유저가 사용하는 프레임워크나 라이브러리는 없는 듯 했다.

다만 세가지 정도로 압축할 수가 있었는데, [ring][ring], [pedestal][pedestal], [luminus][luminus] 였다. ring은 프레임워크라기 보다는 웹서버 라이브러리였고, pedestal과 luminus가 프레임워크로 볼 수 있는데, pedestal이 Django 같이 올인원 패키지 같다면, luminus는 flask, express에 필요한 애들을 미리 포장한 종합 선물 세트 같은 느낌이렸다. _[프레임워크와 라이브러리의 차이](https://www.bing.com/search?q=%ed%94%84%eb%a0%88%ec%9e%84%ec%9b%8c%ed%81%ac+%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9f%ac%eb%a6%ac+%ec%b0%a8%ec%9d%b4&qs=LT&pq=%ed%94%84%eb%a0%88%ec%9e%84%ec%9b%8c%ed%81%ac+%eb%9d%bc%ec%9d%b4%eb%b8%8c%eb%9f%ac%eb%a6%ac&sc=10-11&cvid=3CAAEFFF3468456781A40C189D3C3FAA&FORM=QBRE&sp=1&ghc=1&lq=0)는 인터넷 검색을 통해 알아보자_

하지만 결국 선택한 것은 [kit 프레임워크][kit]였는데 luminus와 유사한 방식이되 덩치가 커진 luminus에서 오래되거나 잘 쓰이지 않는 패키지들을 걷어내고 심플하게 만든 녀석이었다. 물론 문서가 좀더 부실하긴 했지만, 이래저래 프로젝트를 진행하다 보니 생각보다 괜찮은 듯하다.

오래진 않았지만 그동안 클로저를 개발하면서 느낌 감상으로는 부분적으로만 사용하던 함수형 프로그래밍을 전면적으로 사용한 것인데, 파이썬과 자바스크립트로 나름 함수형 코드를 작성하고 있었다고 느꼈지만, 함수형 프로그래밍으로만 하다보니 난이도가 급 상승하는 걸 느꼈다. 그동안 잘 못써왔던 재귀함수의 사용빈도도 많아졌고, 코드의 구조를 생각하는 부분이 이전과는 많이 달라진 느낌이 든다.

또, 코드는 매우 간결해지고, REPL의 이용으로 인해 빠른 코드 작성 루프를 가지게 되는 점 등이 뭔가 달라진 부분이랄까 하는 생각이 든다.

[vscode]: https://code.visualstudio.com/
[calva]: https://calva.io/
[kit]: https://kit-clj.github.io/
[deps]: https://clojure.org/guides/deps_and_cli
[boot]: https://boot-clj.github.io/
[clj-new]: https://github.com/seancorfield/clj-new
[emacs]: https://www.gnu.org/software/emacs/
[ring]: https://github.com/ring-clojure/ring
[pedestal]: http://pedestal.io/
[luminus]: https://luminusweb.com/
