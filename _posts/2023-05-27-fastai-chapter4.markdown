---
layout: post
title: "fastai와 파이토치가 만나 꽃피운 딥러닝 4장"
date: 2023-05-27 19:44:00 +0900
categories: ml
---

[Deep Learning for Coders with fastai & PyTorch][fastai]의 4장이다.

이번주부터 프리랜서 웹프론트엔드 개발자로 일을 시작해서 좀 늦어졌다.

4장부터는 본격적으로 딥러닝에 대한 이야기를 시작한다. 가장 딥러닝에 가장 근본이 되는 수학 공식을 코드로 풀어 설명하며, 딥러닝의 시작이자 끝을 보여준다. 지금까지 여러 딥러닝 관련 서적들을 보며(\_물론 너무 어려운 책들을 고른 탓도 있긴하다\_\_) 수학 공식과 익숙치 않은 어려운 용어 탓에 포기하기가 매일반 이었는데, 내 마음을 꿰뚫어 본듯이 겁먹지 말라는 저자의 주석이 촘촘히 달려 있다.

mnist 손글씨 이미지 데이터를 통해 숫자 분류기를 구현하고 있는데, fastai와 pytorch라이브러리를 활용하여, 너무 저수준의 구현은 피하고 있다. 학습을 위해 숫자 3과 7에 대한 분류로만 진행하는데 이런 단순함을 통해 그동안 이해하지 못했던 딥러닝의 본질을 이해하게 된 것만으로도 큰 도움이 되었다고 얘기할 수 있다.

4장의 질문은 다음과 같다.

1. 컴퓨터는 흑백 이미지를 어떻게 표현하나요? 컬러 이미지는 어떻게 표현하나요?

컴퓨터에서 흑백을 인식하는 방법은 1개의 픽셀마다 0(하얀색) 부터 255(검은색) 까지 색조를 나누는 방법을 사용한다. 따라서 가로(width) 28 x 세로 (height) 28 픽셀 사이즈의 이미지는 28 \_ 28 = 784 개의 0부터 255의 값의 모음이다. 컬러색은 RGB 3개의 0부터 255까지의 묶음으로 볼 수 있는데, 이 경우 1개의 픽셀이 [R, G, B]의 3개의 0~255 값으로 구성된 3 x 28 x 28 = 2,352 의 값의 모음으로 볼 수 있다.

2. MNIST_SAMPLE 데이터셋의 파일과 폴더는 어떻게 구성되나요? 이렇게 구성된 이유는 무엇일까요?

MNIST_SAMPLE 데이터 셋의 구성은 제일 상위에서 [train, valid] 2개의 폴더로 구성된다. Train, valid 각 폴더는 레이블에 해당하는 3과 7 폴더를 가지고 있고, 그 하위에 이미지 데이터들을 가지고 있다. Train과 valid는 모델이 훈련하고 평가하기 위해 서로 구분되어야 하기 때문에 나뉘어져 있으며, 훈련과 평가를 위해서는 같은 레이블의 데이터를 공급해야 하기 때문이다. 또한 용량이 크고 형식이 정해지지 않은 이미지 데이터는 문서나, 테이블 형식의 데이터로 관리하기가 어렵기 때문에 이런 분류 방법을 쓰는 것이 데이터 중복을 피할 수 있게 된다.

3. '픽셀 유사도' 접근법이 숫자를 분류하는 방식을 설명해보세요.

픽셀 유사도 숫자 분류는 모든 샘플 이미지의 각 픽셀위치에 대한 평균값을 구해, 분류하고자 하는 이미지와 비교하는 평가 함수의 오차가 작은 값을 기준으로 분류를 진행하는 것을 뜻한다.

4. 리스트 컴프리헨션이 무엇인가요? 리스트에서 홀수를 선택한 다음 두 배 증가시키는 리스트 컴프리헨션을 만들어 보세요.

리스트 컴프리헨션: 반복문을 이용해 배열을 만드는 파이썬의 구문으로, 성능상 큰 이점이 있다. 실무를 진행할 때도 for문을 이용해 명령형 코드를 짤 때와 비교해 4개 이상의 성능 향상의 경험도 있어, 반드시 명령형 방식의 for문을 써야하는 경우가 아니라면, 리스트 컴프리헨션을 사용하고, 바로 코드로 표현하기 어려운 경우에는 명령형 for문으로 코딩한 후 꼭 수정하고 있다.

홀수 선택해서 두 배 증가 시키는 리스트 컴프리 헨션

`[x*2 for x in Range(0, 10) if x % 2 !=2 0]`

5. 랭크3 텐서란 무엇인가요?

랭크3 텐서: x, y, z축을 가진 큐브구조의 배열이다.

6. 텐서의 랭크와 모양은 어떻게 다른가요? 모양에서 랭크를 어떻게 구할 수 있나요?

텐서의 모양은 랭크와 크기 정도를 표현하는데, 모양의 축의 개수가 랭크가 된다.

7. RMSE와 L1 노름은 무엇인가요?

RMSE와 L1 노름Norm: 딥러닝에 대한 강의 자료로 코세라의 앤드류 응의 영어 수업을 처음 겪었던 것 같다. 그 이후로 많은 책과 영상에서 노름을 많이 봤고, 이게 도대체 뭐야? 했는데 사실 중,고등학교 때 배웠던 수학 공식을 어려운 용어로 표현한 것 뿐이었더랬다. L1 노름은 오차의 절대값의 평균, RMSE는 오차의 제곱에 루트를 씌운 값에 평균일 뿐이랬다. _기억상 중학교 때 배운것 같은데?_

8. 파이썬의 반복문보다 수천 배 빠르게 수천 개의 계산을 하는 방법은 무엇인가요?

파이터치의 텐서의 API 함수를 이용하면 파이썬의 반복문 보다 수천배 빠르게 계산할 수 있다. 왜냐하면 파이터치는 실제 구현이 C로 되어 있고, GPU를 이용해 계산을 수행할 수 있기 때문에 파이썬 언어의 느린 실행속도를 C 언어의 구현이 보완하고, GPU의 병렬 계산 능력을 사용한다면 최신 컴퓨터의 성능을 충분히 활용할 수 있다.

프로그래밍을 배운지 얼마 안되었을 때에는 파이썬으로 코딩을 하는데, 어떻게 C언어를 사용한다는 거지 라는 생각을 했었는데, 컴퓨터는 사실 언어에 관계없이 컴퓨터가 이해할 수 있는 컴파일된 무언가를 사용하는데 파이토치는 C언어를 사용해 컴파일된 무언가로 만들어져있고, 그 무언가를 조종하는 리모콘으로 파이썬을 사용한다는 것을 알게 되었더랬다.

9. 3x3 텐서 또는 배열을 만들고 1부터 9까지 넣어보세요. 그리고 값을 두 배 증가시키세요. 그 다음 우측 하단의 숫자 네 개를 선택해보세요.

```
1부터 9까지 넣기 => [(y*3) + (x + 1) for y in range(3) for x in range (3)]

3x3 배열 생성하기 => txt = [[3*x+1, 3*x+2, 3*x+3] for x in range(3)]
우측 하단의 숫자 4개 선택하기 => txt[1][1:], txt[2][1:]

pytorch 이용
ten = torch.tensor(
    np.array([
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9],
    ])
)
tensor([[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])

ten[1:, 1:]
tensor([[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])

```

10. 브로드캐스팅이란 무엇인가요?

브로드캐스팅이란? 행열(터치) 연산에서 구조가 맞지 않아 연산을 할 수 없는 경우에도, 계산을 할 수 있게 자동적으로 변환해주는 기능

11. 학습용 데이터셋과 검증용 데이터셋으로 계산되는 평가지표란 무엇인가요? 왜 평가지표를 계산할까요?

**평가지표**란 데이터셋에 표기된 올바른 레이블과 모델이 도출한 예측을 비교해서 모델이 얼마나 좋은지를 평가하는 단일 숫자.

평가지표를 계산함으로 모델의 성능을 평가할 수 있어, 학습 epoch를 멈출 수도 있고, 데이터의 문제점을 찾거나 모델을 생성하는데 발생하는 여러가지 문제를 확인해 볼 수 있다.

12. SGD란 무엇인가요?

확률적 경사 하강법(Stochastic Gradient Descent)은 주어진 값에 대하여 함수의 최적 파라미터를 찾기 위해, 임의이 값으로 초기화된 파라미터를 가지고 손실을 평가하는 함수를 통해 그레디언트값을 계산해 파라미터 값을 조절하는 방식을 반복해 최적의 파라미터 값을 찾는 방법.

13. SGD가 미니배치를 사용하는 이유는 무엇인가요?

전체 데이터셋에 대한 계산방법은 시간이 오래 걸리고, 단일 항목에 대한 계산은 많은 정보를 활용할 수 없어서 부정확하고 불안정한 그레이디언트가 계산되기 때문에, 가중치 갱신에 문제가 있다. 그래서 한번에 일정 개수의 데이터에 대한 손실의 평균을 계산하는 미니배치학습 방식을 사용한다.

14. 머신러닝에서 SGD의 일곱 단계는 무엇인가요?

    1. 가중치를 초기화<sub>initialize</sub>
    2. 현재 가중치로 예측<sub>predicate</sub>
    3. 예측한 결과로 모델이 얼마나 좋은지 계산(손실 측정).
    4. 가중치 갱신 정도가 손실에 미치는 영향을 측정하는 그레이디언트<sub>gradient</sub> 계산
    5. 4번 단계에서 계산한 그레이디언트로 가중치의 값을 한 단계<sub>step</sub> 조정
    6. 2번 단계로 돌아가서 과정을 반복<sub>repeat</sub>
    7. 학습 과정을 멈춰도 좋다는 판단이 설 때까지 계속해서 반복.

15. 모델의 가중치는 어떻게 초기화되나요?

무작위로 초기화.

16. 손실이란 무엇인가요?

모델의 성능이 좋을 때 낮은 값을 반환하는 함수.

17. 항상 높은 학습률을 사용하지 못하는 이유는 무엇인가요?

너무 높은 학습률을 사용하게 되면 손실이 더 심해지거나, 학습률이 뛰어다니게 되어 너무 오랜 시간이 걸리는 현상이 나타날 수 있음.

18. 그레이디언트란 무엇인가요?

특정한 위치에서 미적이 적용된 값. 기울기

19. 여러분이 직접 그레이디언트를 계산하는 방법을 알아야 하나요?

아니요. 파이토치에서 잘 해줌.

20. 정확도를 손실 함수로 사용할 수 없는 이유는 무엇인가요?
21. 시그모이드 함수를 그려보세요. 함수 모양에서 특별한 점은 무엇인가요?

출력값으로 항상 0, 1 사이의 값만이 생성되며, 오직 증가만 하는 상승 곡선이다. x값이 0을 기준으로 그 주변이 기울기가 가장 가파르다.

22. 손실 함수와 평가지표의 다른 점은 무엇인가요?

평가지표는 사람의 이해를 돕고, 손실은 자동화된 학습을 이끌어 나간다는 점이 주된 차이점. 손실은 유의미한 미분이 있는 함수여야 하고, 넓고 평평하거나 급작스러운 변화구간이 있어선 안되고, 적당히 매끄러운 형태를 띄어야 한다.

손실함수는 사람이 정한 달성 목표를 정확히 반영하지 못하지만, 달성 목표와 그레이디언트로 최적화될 수 있는 함수 사이의 절충안으로 볼수 있다. 손실 함수는 데이터셋의 각 요소에 대해 계산되고, 한 에포크가 끝나는 시점에는 모든 손실값의 평균을 구할 수 있다.

23. 학습률로 새로운 가중치를 계산하는 함수는 무엇인가요?

최적화 단계(optimization step)를 사용한 파라미터의 갱신 단계(stepping).

24. DataLoader 클래스의 역할은 무엇인가요?

학습에 필요한 데이터를 공급하는 다양한 방법을 제공함.

25. 각 에포크에 SGD가 수행하는 기본적인 단계를 보여주는 슈도코드를 작성해보세요.

PRED = MODEL(X)
LOSS = LOSS_FUNC(PRED, Y)
LOSS.BACKWARD()
PARAMS = PARAMS.GRAD x LR

26. [1,2,3,4]와 'abcd'를 인자로 전달받아 [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]를 반환하는 함수를 만들어보세요. 출력된 데이터 구조의 특별한 점은 무엇인가요?

```
def hap(xs, ys):
    arr = []
    for x, y in zip(xs, ys):
            arr.append((x, y))
    return arr
```

27. 파이토치의 view가 하는 일은 무엇인가요?
28. 신경망의 편향 파라미터란 무엇인가요? 왜 필요할까요?
29. 파이썬의 @ 연산자 역할은 무엇인가요?

행렬 곱셈을 수행해줌.

30. backward 메서드가 하는 일은 무엇인가요?
31. 그레이디언트를 0으로 만들어야만 하는 이유는 무엇인가요?
32. Learner로 넘겨줘야 하는 정보에는 무엇이 있나요?
33. 학습 루프의 기본 단계를 보여주는 파이썬 코드나 슈도코드를 작성해보세요.
34. ReLU란 무엇인가요? 값 범위가 -2에서 +2까지만 그래프를 그려보세요.
35. 활성화 함수란 무엇인가요?
36. F.relu와 nn.ReLU의 차이는 무엇인가요?
37. 만능 근사 정리는 비선형성 하나만으로도 모든 함수를 거의 근사할 수 있음을 보여줍니다. 그렇다면 왜 보통 비선형성이 하나 이상 필요할까요?

추가연구

1. 여기서 배운 학습루프에 기반해 밑바닥에서부터 직접 Learner를 구현해보세요.
2. 전체 MNIST 데이터셋으로 모든 단계를 수행해보세요(3과 7이 아닌 모든 숫자). 중요한 프로젝트이며, 완성하는 데 시간이 상당히 걸릴지도 모릅니다. 도중에 만난 여러 장애물을 극복하는 과정에 여러분만의 연구를 해볼 기회를 얻게 될 것입니다.
